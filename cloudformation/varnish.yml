AWSTemplateFormatVersion: '2010-09-09'
Description: Varnish Layer
Parameters:
  VPCStackName:
    Type: String
  AccountName:
    Type: String
  Environment:
    Type: String
    AllowedValues:
    - test
    - sviluppo
    - produzione
    - collaudo
    - staging
    - developing
    - production
  Owner:
    Type: String
  CentroCosti:
    Type: String
  Project:
    Type: String
  XPeppersTrentoIp:
    Type: String
    Description: IP Address range for local infrastructure
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  VarnishInstanceType:
    Description: Varnish EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  MinSizeVarnish:
    Type: Number
  MaxSizeVarnish:
    Type: Number
    Type: Number
  AssignPublicIP:
    Type: String
    Description: true or false to assign public IP to instances
    AllowedValues:
      - "true"
      - "false"
  AnsiblePublicKey:
    Type: String
    Description: Public key to authorized for ansible server
  HostedZoneName:
    Type: String
    Default: opencontent.biz.
  ALBcertificateARN:
    Type: String
    Description: Certificate arn to associate with Php Load Balancer
    Default: ''
Conditions: 
  UsePrivateSubnet:
    Fn::Equals:
    - 'false'
    - !Ref AssignPublicIP
  UseHTTPS:
    !Not [!Equals [!Ref ALBcertificateARN, '']]
Mappings:
  AMI2RegionMap:
    us-east-1:
      '64' : ami-6d1c2007
    us-east-2:
      '64' : ami-6a2d760f
    us-west-1:
      '64' : ami-af4333cf
    us-west-2:
      '64' : ami-d2c924b2
    ap-northeast-2:
      '64' : ami-c74789a9
    ap-southeast-1:
      '64' : ami-f068a193
    ap-southeast-2:
      '64' : ami-fedafc9d
    ap-northeast-1:
      '64' : ami-eec1c380
    eu-central-1:
      '64' : ami-9bf712f4
    eu-west-1:
      '64' : ami-5f76b626
Resources:
#############
###VARNISH###
#############
  VarnishInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: VarnishIAMRole
  VarnishIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
  VarnishGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Varnish
            - Ref: Project
            - Ref: Environment
        PropagateAtLaunch: 'true'
      - Key: Role
        Value: varnish
        PropagateAtLaunch: 'true'
      - Key: Environment
        Value:
          Ref: Environment
        PropagateAtLaunch: 'true'
      LaunchConfigurationName:
        Ref: VarnishLaunchConfig
      MinSize: !Ref MinSizeVarnish
      MaxSize: !Ref MaxSizeVarnish
      TargetGroupARNs:
      - !Ref TargetGroupMain
      VPCZoneIdentifier:
        !If
          - UsePrivateSubnet
          - - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnetA"
            - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnetB"
          - - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnetB"
            - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnetB"
  VarnishLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref VarnishInstanceProfile
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AMI2RegionMap
        - Ref: AWS::Region
        - '64'
      SecurityGroups:
      - Ref: VarnishSecurityGroup
      - Ref: SSHSecurityGroup
      InstanceType:
        Ref: VarnishInstanceType
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            mkdir /home/centos/.ssh
            echo "${AnsiblePublicKey}" >> /home/centos/.ssh/authorized_keys
            chown -R centos:centos /home/centos/.ssh
            chmod 600 /home/centos/.ssh/authorized_keys
  LoadBalancerVarnishSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPC-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Project
        Value:
          Ref: Project
      - Key: Environment
        Value:
          Ref: Environment

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - !Ref Project
            - varnish
            - !Ref Environment
      Tags:
      - Key: Environment
        Value:
          !Ref Environment
      SecurityGroups:
      - !Ref LoadBalancerVarnishSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnetB"
  TargetGroupMain:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      Matcher:
        HttpCode: 200-398
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPC-id"
      Name:
          Fn::Join:
            - "-"
            - - varnish
              - !Ref Project
              - !Ref Environment
              - TG
      Tags:
        - Key: Environment
          Value:
            !Ref Environment
        - Key: Project
          Value:
            !Ref Project
  ListenersHTTPS:
    Condition: UseHTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Certificates:
        - CertificateArn: !Ref ALBcertificateARN
      Port: '443'
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupMain
  ListenersHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupMain

  VarnishSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPC-id"
      GroupDescription: Enable HTTP and HTTPS from the frontend load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Ref: LoadBalancerVarnishSecurityGroup
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        SourceSecurityGroupId:
          Ref: LoadBalancerVarnishSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStackName}-VPC-id"
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: XPeppersTrentoIp
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Fn::ImportValue:
            !Sub "${VPCStackName}-VpcCidr"

  RecordSetUI:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name:
        !Join
          - "."
          - - varnish
            - !Ref Environment
            - !Ref HostedZoneName
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - DNSName
        HostedZoneId:
          Fn::GetAtt:
            - ApplicationLoadBalancer
            - CanonicalHostedZoneID